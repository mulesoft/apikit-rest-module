<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
    http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd">

  <munit:config name="headers-validation-test-suite">
    <munit:parameterizations>
      <munit:parameterization name="RAML10">
        <munit:parameters>
          <munit:parameter propertyName="api.location" value="munit/headers/validation10.raml"/>
        </munit:parameters>
      </munit:parameterization>
      <munit:parameterization name="OAS30">
        <munit:parameters>
          <munit:parameter propertyName="api.location" value="munit/headers/validation_oas30.yaml"/>
        </munit:parameters>
      </munit:parameterization>
    </munit:parameterizations>
  </munit:config>


  <munit:test name="success-when-optional-header-is-not-sent">
    <munit:enable-flow-sources>
      <munit:enable-flow-source value="headers-validation-main"/>
      <munit:enable-flow-source value="post:\datetime2616:headers-validation-config"/>
    </munit:enable-flow-sources>
    <munit:execution>
      <http:request method="POST" config-ref="http-requester-simple" path="/headers/validation/datetime2616"/>
    </munit:execution>
    <munit:validation>
      <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]"/>
    </munit:validation>
  </munit:test>

  <munit:test name="failed-when-optional-header-has-not-valid-value">
    <munit:enable-flow-sources>
      <munit:enable-flow-source value="headers-validation-main"/>
      <munit:enable-flow-source value="post:\datetime2616:headers-validation-config"/>
    </munit:enable-flow-sources>
    <munit:execution>
      <http:request method="POST" config-ref="http-requester-simple" path="/headers/validation/datetime2616">
        <http:headers>#[
          output application/java
          ---
          {
            'X-MaxRows': 'JEJE'
          }]
        </http:headers>
        <http:response-validator>
          <http:success-status-code-validator values="1..500"/>
        </http:response-validator>
      </http:request>
    </munit:execution>
    <munit:validation>
      <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(400)]"/>
      <munit-tools:assert-that expression="#[payload.description]"
                               is="#[MunitTools::equalTo('Invalid value \'JEJE\' for header \'X-MaxRows\'')]"/>
    </munit:validation>
  </munit:test>

  <munit:test name="success-with-default-header-value">
    <munit:enable-flow-sources>
      <munit:enable-flow-source value="headers-validation-main"/>
      <munit:enable-flow-source value="post:\datetime2616:headers-validation-config"/>
    </munit:enable-flow-sources>
    <munit:execution>
      <http:request method="POST" config-ref="http-requester-simple" path="/headers/validation/datetime2616">
        <http:headers>#[
          output application/java
          ---
          {
          'X-MaxRows': '123'
          }]
        </http:headers>
        <http:response-validator>
          <http:success-status-code-validator values="1..500"/>
        </http:response-validator>
      </http:request>
    </munit:execution>
    <munit:validation>
      <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]"/>
      <munit-tools:assert-that expression="#[output text/plain --- payload]"
                               is="#[MunitTools::equalTo('hola-header')]"/>
    </munit:validation>
  </munit:test>

  <munit:test name="success-with-multiple-accept-header-values">
    <munit:enable-flow-sources>
      <munit:enable-flow-source value="headers-validation-main"/>
      <munit:enable-flow-source value="get:\multiplicity:headers-validation-config"/>
    </munit:enable-flow-sources>
    <munit:execution>
      <http:request method="GET" config-ref="http-requester-simple" path="/headers/validation/multiplicity">
        <http:headers>#[
          output application/json
          ---
          {
          'Accept': 'Application/json',
          'Accept': 'Application/xml'
          }]
        </http:headers>
        <http:response-validator>
          <http:success-status-code-validator values="1..500"/>
        </http:response-validator>
      </http:request>
    </munit:execution>
    <munit:validation>
      <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]"/>
    </munit:validation>
  </munit:test>

  <munit:test name="success-with-valid-comma-separated-header-value">
    <munit:enable-flow-sources>
      <munit:enable-flow-source value="headers-validation-main"/>
      <munit:enable-flow-source value="get:\multiplicity:headers-validation-config"/>
    </munit:enable-flow-sources>
    <munit:execution>
      <http:request method="GET" config-ref="http-requester-simple" path="/headers/validation/multiplicity">
        <http:headers>#[
          output application/json
          ---
          {
          'Accept': 'application/json,application/xml'
          }]
        </http:headers>
        <http:response-validator>
          <http:success-status-code-validator values="1..500"/>
        </http:response-validator>
      </http:request>
    </munit:execution>
    <munit:validation>
      <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]"/>
    </munit:validation>
  </munit:test>

  <munit:test name="unsupported-media-type-with-multiple-content-type-header-values">
    <munit:enable-flow-sources>
      <munit:enable-flow-source value="headers-validation-main"/>
      <munit:enable-flow-source value="post:\multiplicity:headers-validation-config"/>
    </munit:enable-flow-sources>
    <munit:execution>
      <http:request method="POST" config-ref="http-requester-simple" path="/headers/validation/multiplicity">
        <http:body>#[
          output application/json
          ---
          {
          'id': 'test'
          }]
        </http:body>
        <http:headers>#[
          output application/json
          ---
          {
          'Content-type': 'application/json',
          'Content-type': 'application/xml'
          }]
        </http:headers>
        <http:response-validator>
          <http:success-status-code-validator values="1..500"/>
        </http:response-validator>
      </http:request>
    </munit:execution>
    <munit:validation>
      <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(415)]"/>
      <munit-tools:assert-that expression="#[output text/plain --- payload.message]"
                               is="#[MunitTools::equalTo('Unsupported media type')]"/>
    </munit:validation>
  </munit:test>

  <munit:test name="unsupported-media-type-with-invalid-content-type-header-value">
    <munit:enable-flow-sources>
      <munit:enable-flow-source value="headers-validation-main"/>
      <munit:enable-flow-source value="post:\multiplicity:headers-validation-config"/>
    </munit:enable-flow-sources>
    <munit:execution>
      <http:request method="POST" config-ref="http-requester-simple" path="/headers/validation/multiplicity">
        <http:body>#[
          output application/json
          ---
          {
          'id': 'test'
          }]
        </http:body>
        <http:headers>#[
          output application/json
          ---
          {
          'Content-type': 'application/json,application/xml'
          }]
        </http:headers>
        <http:response-validator>
          <http:success-status-code-validator values="1..500"/>
        </http:response-validator>
      </http:request>
    </munit:execution>
    <munit:validation>
      <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(415)]"/>
      <munit-tools:assert-that expression="#[output text/plain --- payload.message]"
                               is="#[MunitTools::containsString('Unsupported media type')]"/>
    </munit:validation>
  </munit:test>

  <munit:test name="invalid-content-type-header-value">
    <munit:enable-flow-sources>
      <munit:enable-flow-source value="headers-validation-main"/>
      <munit:enable-flow-source value="post:\multiplicity:headers-validation-config"/>
    </munit:enable-flow-sources>
    <munit:execution>
      <http:request method="POST" config-ref="http-requester-simple" path="/headers/validation/multiplicity">
        <http:body>#[
          output application/json
          ---
          {
          'id': 'test'
          }]
        </http:body>
        <http:headers>#[
          output application/json
          ---
          {
          'Content-type': 'application/xml'
          }]
        </http:headers>
        <http:response-validator>
          <http:success-status-code-validator values="1..500"/>
        </http:response-validator>
      </http:request>
    </munit:execution>
    <munit:validation>
      <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(415)]"/>
      <munit-tools:assert-that expression="#[output text/plain --- payload.message]"
                               is="#[MunitTools::equalTo('Unsupported media type')]"/>
    </munit:validation>
  </munit:test>

  <munit:test name="success-with-special-characters-at-header-value">
    <munit:enable-flow-sources>
      <munit:enable-flow-source value="headers-validation-main"/>
      <munit:enable-flow-source value="post:\datetime2616:headers-validation-config"/>
    </munit:enable-flow-sources>
    <munit:execution>
      <http:request method="POST" config-ref="http-requester-simple" path="/headers/validation/datetime2616">
        <http:headers>#[
          output application/java
          ---
          {
          'X-MaxRows': '123',
          'defaultHeaderValue': '{ this should work }'
          }]
        </http:headers>
        <http:response-validator>
          <http:success-status-code-validator values="1..500"/>
        </http:response-validator>
      </http:request>
    </munit:execution>
    <munit:validation>
      <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]"/>
      <munit-tools:assert-that expression="#[output text/plain --- payload]" is="#[MunitTools::equalTo('{ this should work }')]"/>
    </munit:validation>
  </munit:test>

  <munit:test name="success-with-string-array-header">
    <munit:enable-flow-sources>
      <munit:enable-flow-source value="headers-validation-main"/>
      <munit:enable-flow-source value="get:\test-array-header:headers-validation-config"/>
    </munit:enable-flow-sources>
    <munit:execution>
      <http:request method="GET" config-ref="http-requester-simple" path="/headers/validation/test-array-header">
        <http:headers>#[
          output application/json
          ---
          {
          'array-header': '{"type": "username", "value": "testvalue"}',
          'array-header': '{"type": "password", "value": "testvalue"}'
          }]
        </http:headers>
        <http:response-validator>
          <http:success-status-code-validator values="1..500"/>
        </http:response-validator>
      </http:request>
    </munit:execution>
    <munit:validation>
      <munit-tools:assert-that expression="#[attributes.statusCode]" is="#[MunitTools::equalTo(200)]"/>
      <munit-tools:retrieve key="first-header"/>
      <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::containsString('username')]"/>
      <munit-tools:retrieve key="second-header"/>
      <munit-tools:assert-that expression="#[payload]" is="#[MunitTools::containsString('password')]"/>
    </munit:validation>
  </munit:test>

</mule>
